""" This script returns the various config settings for reports, searchradii, maps and anything else that is centrally managed """# -----------------------------------------------------------------------------# map_configsettings.py# -----------------------------------------------------------------------------import os################################################################################ Returns the paper sizesdef paperconfig():    '''    Returns a dictionary of paper size settings and characteristics.    Output dictionary is of the form     <dict>[<Paper Name>][<Orientation>][<...details...>]    Examples         In : outputpaperdict['A4']['Portrait']        Out: {'margin': 10, 'type': 'ISO', 'unit': 'mm', 'xdist': 210, 'ydist': 297}        In : outputpaperdict['Letter']['Landscape']        Out: {'margin': 10, 'type': 'US', 'unit': 'mm', 'xdist': 279, 'ydist': 216}    '''    #orientations are hardcoded below, so will need changing below as well as here    orientations = ['Portrait', 'Landscape']    # default descriptions are fixed in code here    isodim="ISO"    usdim="US"    unit="mm"    margin=10 #mm    #define dimensions in portrait first, then apply landscape orientations    paperDict = {}    paperDict["A4"] = {'type':isodim, 'margin':margin, 'xdist':210, 'ydist':297, 'unit':unit}    paperDict["A3"] = {'type':isodim, 'margin':margin, 'xdist':297, 'ydist':420, 'unit':unit}    paperDict["A2"] = {'type':isodim, 'margin':margin, 'xdist':420, 'ydist':594, 'unit':unit}    paperDict["A1"] = {'type':isodim, 'margin':margin, 'xdist':594, 'ydist':840, 'unit':unit}    paperDict["A0"] = {'type':isodim, 'margin':margin, 'xdist':840, 'ydist':1198, 'unit':unit}    paperDict["Legal"] = {'type':usdim, 'margin':margin, 'xdist':216, 'ydist':356, 'unit':unit}    paperDict["Letter"] = {'type':usdim, 'margin':margin, 'xdist':216, 'ydist':279, 'unit':unit}    paperDict["Tabloid"] = {'type':usdim, 'margin':margin, 'xdist':279, 'ydist':432, 'unit':unit}    outputpaperdict = {}    # need to flip xdist and ydist for landscape orientations    for name, indict in paperDict.items():        temporientdict = {}        for ori in orientations:            #define the "real" x and y dimensions for this orientation            if ori == 'Portrait':                realx = indict['xdist']                realy = indict['ydist']            elif ori == 'Landscape':                realx = indict['ydist']                realy = indict['xdist']                      else:                print("I don't understand %s paper orientation; skipping" % ori)                continue            #create new dictionary with correct dimensions            dimdict = {}            for key in indict.keys():                if key in ['xdist', 'ydist']:                    dimdict['xdist'] = realx                    dimdict['ydist'] = realy                else:                    dimdict[key] = indict[key]            temporientdict[ori] = dimdict        #put both orientations into dictionary under paper size        outputpaperdict[name] = temporientdict            # Return the paper config dictionary    return outputpaperdict################################################################################# Returns the different elements for featuresdef elementconfig():    '''    Returns a dictionary of map elements, each map element containing a list of    properties to place it on a map (of not yet defined size/orientation)    '''    basicElement = ["PointX", "PointY", "Width", "Height"]    TextAndElement  = basicElement + ["Text"]    elementDict = {'malogo':basicElement,                   'country':TextAndElement,                   'title':TextAndElement,                   'inset':basicElement,                   'legend':TextAndElement,                   'summary':TextAndElement,                   'scale_bar':TextAndElement,                   'scale_text':TextAndElement,                   'data_sources_label':TextAndElement,                   'data_sources':TextAndElement,                   'map_producer':TextAndElement,                   'create_data_time_label':TextAndElement,                   'create_data_time':TextAndElement,                   'mxd_name_label':TextAndElement,                   'map_no':TextAndElement,                   'spatial_reference_label':TextAndElement,                   'spatial_reference':TextAndElement,                   'glide_no_label':TextAndElement,                   'glide_no':TextAndElement,                   'donor_credit':TextAndElement,                   'disclaimer':TextAndElement    }    # Return the elements dictionary    return elementDict################################################################################# Returns the configuration settings for the priority datasetsdef locateconfig():    locatedict = [                  {'A4':["Portrait"]:'tag':["malogo"],                   'positions':["42.5", "275", "50", "22.552", "17.5", "263.724", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["location"],                   'positions':["42.5", "256.5", "65", "13", "10", "250", "Arial", "14", "No", "No", "Black"]},                  {'A4':["Portrait"]:'tag':["title"],                   'positions':["42.5", "234", "65", "28", "10", "220", "Arial", "16", "Yes", "No", "Black"]},                  {'A4':["Portrait"]:'tag':["inset"],                   'positions':["42.5", "193", "65", "44", "10", "171", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["legend"],                   'positions':["42.5", "138.475", "65", "65.05", "10", "105.95", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["summary"],                   'positions':["42.5", "2100", "65", "22", "10", "89", "Arial", "10", "No", "No", "Black"]},                  {'A4':["Portrait"]:'tag':["malogo"],                   'positions':["42.5", "275", "50", "22.552", "17.5", "263.724", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["location"],                   'positions':["42.5", "256.5", "65", "13", "10", "250", "Arial", "14", "No", "No", "Black"]},                  {'A4':["Portrait"]:'tag':["title"],                   'positions':["42.5", "234", "65", "28", "10", "220", "Arial", "16", "Yes", "No", "Black"]},                  {'A4':["Portrait"]:'tag':["inset"],                   'positions':["42.5", "193", "65", "44", "10", "171", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["legend"],                   'positions':["42.5", "138.475", "65", "65.05", "10", "105.95", "", "", "", "", ""]},                  {'A4':["Portrait"]:'tag':["summary"],                   'positions':["42.5", "2100", "65", "22", "10", "89", "Arial", "10", "No", "No", "Black"]},                ]    # Return the priority dictionary    return priodict